{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","div","key","layout","whileHover","opacity","s","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98632cf1.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyDxyMWOipdh6CEsXPueV8LQPIWo397sj48\",\r\n    authDomain: \"firegram-10a47.firebaseapp.com\",\r\n    projectId: \"firegram-10a47\",\r\n    storageBucket: \"firegram-10a47.appspot.com\",\r\n    messagingSenderId: \"929861159728\",\r\n    appId: \"1:929861159728:web:a723e24b8af155de2096f5\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport {projectStorage,projectFirestore,timestamp};","import { useState, useEffect } from 'react';\r\nimport { projectFirestore } from '../firebase/config';\r\n\r\nconst useFirestore = (collection) => {\r\n  const [docs, setDocs ] = useState([]);\r\n  useEffect(() => {\r\n    const unsub = projectFirestore.collection(collection)\r\n    .orderBy('createdAt', 'desc')\r\n    .onSnapshot((snap) => {\r\n      let documents = [];\r\n      snap.forEach(doc => {\r\n        documents.push({...doc.data(), id: doc.id});\r\n        });\r\n        setDocs(documents);\r\n      });\r\n\r\n      return () => unsub();\r\n\r\n  }, [collection])\r\n  \r\n  return { docs };\r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFirestore from '../hooks/useFirestore';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n  const { docs } = useFirestore('images');\r\n\r\n  return (\r\n    <div className=\"img-grid\">\r\n      {docs && docs.map(doc => (\r\n        <motion.div className=\"img-wrap\" key={doc.id} \r\n          layout\r\n          whileHover={{ opacity: 1 }}s\r\n          onClick={() => setSelectedImg(doc.url)}\r\n        >\r\n          <motion.img src={doc.url} alt=\"uploaded pic\"\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            transition={{ delay: 1 }}\r\n          />\r\n        </motion.div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Modal = ({ setSelectedImg, selectedImg }) => {\r\n\r\n  const handleClick = (e) => {\r\n    if (e.target.classList.contains('backdrop')) {\r\n      setSelectedImg(null);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <motion.div className=\"backdrop\" onClick={handleClick}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n    >\r\n      <motion.img src={selectedImg} alt=\"enlarged pic\" \r\n        initial={{ y: \"-100vh\" }}\r\n        animate={{ y: 0 }}\r\n      />\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport default Modal;","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Click the icon to upload.</p>\n    </div>\n  )\n}\n\nexport default Title;","import {useState, useEffect} from 'react';\r\nimport { projectStorage, projectFirestore, timestamp  } from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n  const [ progress, setProgress] = useState(0);\r\n  const [ error, setError] = useState(null);\r\n  const [ url, setUrl] = useState(null);\r\n useEffect(() => {\r\n   const storageRef = projectStorage.ref(file.name);\r\n   const collectionRef = projectFirestore.collection('images');\r\n  \r\n   storageRef.put(file).on('state_changed', (snap) => {\r\n     let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n     setProgress(percentage);\r\n   }, (err) => {\r\n     setError(err);\r\n   }, async () => {\r\n     const url = await storageRef.getDownloadURL();\r\n     const createdAt = timestamp();\r\n     await collectionRef.add({ url, createdAt });\r\n     setUrl(url);\r\n   });\r\n  }, [file]);\r\n   return { progress,url,error };\r\n\r\n}\r\nexport default useStorage;","import React, { useEffect } from 'react'\r\nimport useStorage from '../hooks/useStorage';\r\nimport { motion } from 'framer-motion';\r\nconst ProgressBar = ({ file, setFile }) => {\r\n  const { url, progress } = useStorage(file);\r\n   useEffect(() => {\r\n    if (url) {\r\n      setFile(null);\r\n    }\r\n  }, [url, setFile]);\r\n\r\n   return (\r\n    <motion.div className=\"progress-bar\"\r\n      initial={{ width: 0 }}\r\n      animate={{ width: progress + '%' }}\r\n    ></motion.div>\r\n  );\r\n} \r\n\r\nexport default ProgressBar;","import React, { useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\n  const UploadForm = () => {\r\n  const [file,setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  \r\n  const types = ['image/png','image/jpeg'];\r\n\r\n  const changeHandler = (e) => {\r\n    let selected = e.target.files[0];\r\n\r\n   if (selected && types.includes(selected.type)) {\r\n     setFile(selected);\r\n     setError('');\r\n   } else {\r\n     setFile(null);\r\n     setError('Please select an image file (png or jpeg)');\r\n   }\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <label>\r\n        <input type=\"file\" onChange={changeHandler} />\r\n        <span>+</span>\r\n      </label>\r\n        <div className=\"output\">\r\n        { error && <div className=\"error\">{ error }</div> }\r\n        { file && <div>{ file.name }</div> }\r\n        { file && <ProgressBar file={file} setFile={setFile} /> }\r\n      </div>\r\n    \r\n    </form>\r\n  )\r\n}\r\nexport default UploadForm;\r\n","import React, { useState } from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\n\nfunction App() {\n  const [selectedImg, setSelectedImg ] = useState(null);\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      { selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} /> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}